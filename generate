package generate;

import java.math.BigInteger;

public class ibanGenClean {

	public boolean checkAccountNumbner(String MFO, String account, String ISOCode) {
		char[] iso = ISOCode.toUpperCase().toCharArray();
		char[] acc = account.toUpperCase().toCharArray();

		// 2 symbols UA
		if (iso.length == 0 && iso.length > 2) {
			fail("Error. Country code is incorrect.");
		}
		// for UA
		if (acc.length == 0 || acc.length < 5 || acc.length > 19) {
			fail("Error. Length must be from 5 to 19 chars Max.");
		}
		for (int j = 0; j < acc.length; j++) {
			if (acc[j] <= 48 && acc[j] >= 57 && acc[j] <= 65 && acc[j] >= 90) {
				fail("Error. Account number has incorrect symbol.");
			}
		}
		return true;
	}
	
	private final int[] WEIGHT = new int[] { 1, 3, 7, 1, 3, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3 };
	
	/**
	 * @param mfo
	 * @param acc
	 */
	public boolean keying(String mfo, String acc) {
		char key;
		int sum;
		char[] str = (mfo.substring(0, 5) + acc).toCharArray();
		str[9] = '0';
		sum = acc.length();
		for (int i = 0; i < str.length; i++) {
			sum += ((Character.digit(str[i], 10) * WEIGHT[i]) % 10);
		}
		key = Character.forDigit(((sum % 10) * 7) % 10, 10);

		if (acc.charAt(4) == key)
			return true;
		else
			return false;
	}


	/**
	 * 'UA' 'checksum' 'MFO' *0x?* 'account' 'number'
	 * 
	 * 
	 * @param MFO
	 * @param account
	 * @param ISOCode
	 * @return
	 */
	public String getIBAN(String MFO, String account, String ISOCode) {
		String fl = ""; // first country code letter
		String sl = ""; // second country code letter
		String fullacc = "";
		String zeroLine = "0";

		char[] iso = ISOCode.toUpperCase().toCharArray();
		char[] acc = account.toUpperCase().toCharArray();

		// Get integer of letter from ISOCode (A = 10, B = 11 ...)
		for (int k = 65; k <= 90; k++) {
			if ((int) iso[0] == k) fl = Integer.toString((k - 65) + 10);
			if ((int) iso[1] == k) sl = Integer.toString((k - 65) + 10);
		}

		// Find account symbol in ASCII table
		for (int j = 0; j < account.length(); j++) {

			// from 0 to 9 (ASCII 48 - 57)
			if (acc[j] >= 48 && acc[j] <= 57) {
				fullacc += acc[j];
				continue;

			} else if (acc[j] <= 90 && acc[j] >= 65) {

				// from A to Z (ASCII 65 - 90)
				for (int k = 65; k < 90; k++) {
					if (acc[j] == k) {
						String val = Integer.toString((k - 65) + 10);
						fullacc += val;
					}
				}
			}
		}

		// Get string from '0's
		for (int i = 2; i <= (25 - MFO.length() - account.length()); i++) {
			zeroLine += "0";
		}

		// full account value transforming to BigInteger
		BigInteger how = new BigInteger(MFO + zeroLine + fullacc + fl + sl + "00", 10);
		BigInteger rem = new BigInteger("97", 10);
		BigInteger big = how.remainder(rem);

		int sum = 98 - big.intValue();

		if (sum <= 9) {
			String sumRather = "0" + Integer.toString(sum);
			String result = ISOCode.toUpperCase() + sumRather + MFO + zeroLine + account.toUpperCase();
			return result;
		}
		String result = ISOCode.toUpperCase() + sum + MFO + zeroLine + account.toUpperCase();
		System.out.println(result);
		return result;
	}
	
	/**
	 * 
	 * @param message
	 */
	public void fail(String message) {
		if (message == null) {
			throw new AssertionError();
		}
		throw new AssertionError(message);
	}
}
