package generate;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

public class IBAN {

	/**
	 * Version 1.0
	 * 
	 * Now it works for UA.
	 * 
	 * MFO keying does not works. But it is easy to use :) For example account 12311
	 * keying with MFO (MFI) 300335 And next keying account is 12322, 12333, 12344.
	 * (+ 11)
	 */

	private static Scanner in;
	public static final String PATH = System.getProperty("user.dir");

	public static void main(String[] args) throws IOException, InterruptedException {
		in = new Scanner(System.in);

		System.out.println("Choose: ");
		System.out.println("Press 1 - print IBAN list");
		System.out.println("Press 2 - generate own IBAN");
		String menu = in.nextLine();

		if (menu.contains("1")) {
			System.out.print("Insert MFO = ");
			String MFO = in.nextLine();
			printList(true, MFO);
			System.out.println("Generate more? Press +");
			while (in.nextLine().contains("+")) {
				printList(true, MFO);
				if (!in.nextLine().contains("+")) {
					break;
				}
				System.out.println("Generate more? Press +" + in.nextLine());
			}
		} else if (menu.contains("2")) {
			System.out.print("Insert MFO = ");
			String MFO = in.nextLine();
			System.out.print("Insert account number = ");
			String account = in.nextLine();
			System.out.print("Insert ISO country code = ");
			String countryCode = in.nextLine();
			getIBAN(MFO, account, countryCode);
		}
	}

	/**
	 * 
	 * @param MFO
	 * @param account
	 *            that you want
	 * @param ISOCode
	 *            (UA)
	 * @return
	 */
	public static String getIBAN(String MFO, String account, String ISOCode) {
		String fl = ""; // first country code letter
		String sl = ""; // second country code letter
		char[] iso = ISOCode.toUpperCase().toCharArray();
		
		if (ISOCode.length() == 0 && ISOCode.length() > 2) {
			fail("Error. Country code is incorrect.");
		} else {
			for (int k = 65; k < 90; k++) {
				if ((int) iso[0] == k) fl = Integer.toString((k - 65) + 10); // U = 30
				if ((int) iso[1] == k) sl = Integer.toString((k - 65) + 10); // A = 10
			}
		}
		char[] acc = account.toUpperCase().toCharArray();
		String fullacc = "";

		if (account.length() < 5 || account.length() > 19) { // for UA
			fail("Error. Lenght must be from 5 to 19 chars Max.");
		}
		for (int j = 0; j < account.length(); j++) {  
			if (acc[j] >= 48 && acc[j] <= 57) { // from 0 to 9 (ASCII 48 - 57)
				fullacc += acc[j];
				continue;
			} else if (acc[j] <= 90 && acc[j] >= 65) { // from A to Z (ASCII 65 - 90)
				for (int k = 65; k < 90; k++) {
					if (acc[j] == k) {
						String val = Integer.toString((k - 65) + 10); // to IBAN A = 10
						fullacc += val;
					}
				}
			} else {
				fail("Error. Account number has incorrect symbol.");
			}
		}
		String zeroLine = "0";

		for (int i = 2; i <= (25 - MFO.length() - account.length()); i++) {
			if (i != 0) zeroLine += "0"; // UA checksum 300335 *0x?* account number 
		}
		BigInteger how = new BigInteger(MFO + zeroLine + fullacc + fl + sl + "00", 10); // full account value transforming to integer
		BigInteger rem = new BigInteger("97", 10);
		BigInteger big = how.remainder(rem);

		int sum = 98 - big.intValue();

		if (sum <= 9) {
			String sumRather = "0" + Integer.toString(sum);
			String result = ISOCode.toUpperCase() + sumRather + MFO + zeroLine + account.toUpperCase();
			return result;
		}
		String result = ISOCode.toUpperCase() + sum + MFO + zeroLine + account.toUpperCase();
		System.out.println(result);
		return result;
	}

	/**
	 * For example
	 * 
	 * @param printList
	 * @param mfo
	 */
	public static void printList(boolean printList, String mfo) {
		if (printList) {
			String[] mfo300335 = { "11002000000001", "12345600001111", "11112111111111", "22221222222211" };
			String[] ran = { "11", "22", "33", "44", "55", "66", "77", "88" };

			for (int j = 1; j <= 10; j++) {
				BigInteger count = new BigInteger(ran[new Random().nextInt(ran.length)], 10);
				BigInteger account = new BigInteger(mfo300335[new Random().nextInt(mfo300335.length)], 10);
				getIBAN(mfo, account.add(count).toString(), "UA");
			}
		}
	}

	/**
	 * 
	 * @param message
	 */
	static public void fail(String message) {
		if (message == null) {
			throw new AssertionError();
		}
		throw new AssertionError(message);
	}
}
